// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import './Car.sol';

contract CarFactory {
    /*
      // Getter function generated by the compiler
      function getCars(uint i) public view returns (Car) {
          return cars[i];
      }
    */
    Car[] public cars;

    function getCars() public view returns (Car[] memory) {
      return cars;
    }

    function create(address _owner, string memory _model) public {
        Car car = new Car(_owner, _model);
        cars.push(car);
    }

    function createAndSendEther(address _owner, string memory _model)
        public
        payable
    {
        Car car = (new Car){value: msg.value}(_owner, _model);
        cars.push(car);
    }

    function getCar(uint _index)
        public
        view
        returns (address owner, string memory model, uint balance)
    {
        Car car = cars[_index];

        return (car.owner(), car.model(), address(car).balance);
    }
}
